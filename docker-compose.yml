version: '3.4'
x-base-service:
  &base-service
  stdin_open: true
  tty: true
  environment:
    SECRET_KEY: "not secure only use for development"
    FLASK_SECRET: 'what'
    LOGLEVEL: 10
    SESSION_COOKIE_SECURE: 0
    DOCKER_HOST: "unix:///var/run/docker.sock"
    REDIS_ENDPOINT: "submission-ui-redis"
    ENABLE_ASYNC: 1
    ENABLE_CALLBACKS: 1

    WAIT_FOR_SERVICES: 1
    WAIT_ON_STARTUP: 5

    AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
    AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"

    # Compiler config.
    CONVERTER_DOCKER_IMAGE: "${CONVERTER_DOCKER_IMAGE}"
    CONVERTER_IMAGE_PULL: 0
    DIND_SOURCE_ROOT: "${DIND_SOURCE_ROOT}"
    AWS_S3_REGION_NAME: "us-east-1"
    S3_ENDPOINT: "https://submission-localstack:4572"
    S3_VERIFY: 0

    FILEMANAGER_ENDPOINT: "http://arxiv-filemanager:8000/filemanager/api"
    FILEMANAGER_CONTENT_PATH: "/{source_id}/content"

    UPLOAD_BASE_DIRECTORY: "/data"

    VERBOSE_COMPILE: 1
    JWT_SECRET: "foosecret"
    CLASSIC_DATABASE_URI: "mysql+mysqldb://foouser:foopass@submission-ui-maria:3306/submission?charset=utf8mb4"
    FILE_MANAGEMENT_SQLALCHEMY_DATABASE_URI: "mysql+mysqldb://foouser:foopass@filemanager-maria:3306/uploads?charset=utf8mb4"
    STORAGE_BACKEND: 'quarantine'
    STORAGE_BASE_PATH: '/storage'
    STORAGE_QUARANTINE_PATH: '/quarantine'

    COMPILER_ENDPOINT: "http://compiler-api:8000/"
    COMPILER_VERIFY: 0

    PLAINTEXT_ENDPOINT: "http://plaintext-api:8000/"
    PLAINTEXT_VERIFY: 0

    # Route e-mail to mailhog.
    EMAIL_ENABLED: 1
    SMTP_HOSTNAME: mailhog
    SMTP_PORT: 1025
    SMTP_SSL: 0
    SMTP_USERNAME: ""
    SMTP_PASSWORD: ""

    # Kinesis events.
    KINESIS_STREAM: "SubmissionEvents"
    KINESIS_VERIFY: 0
    KINESIS_ENDPOINT: "https://submission-localstack:4568"
    KINESIS_START_TYPE: "TRIM_HORIZON"

    # Async config for the submission agent.
    SUBMISSION_AGENT_BROKER_URL: "redis://submission-ui-redis:6379/0"
    SUBMISSION_AGENT_DATABASE_URI: "mysql+mysqldb://foouser:foopass@submission-agent-maria:3306/agent?charset=utf8mb4"
    # AGENT_DATABASE_HOST: "submission-agent-maria"

    CLASSIFIER_ENDPOINT: "http://mock-classifier:8000"
    CLASSIFIER_VERIFY: 0

    VAULT_ENABLED: "0"
    NAMESPACE: "production"
    KUBE_TOKEN: "fookubetoken"
    VAULT_HOST: "mock-vault"
    VAULT_PORT: "8200"
    VAULT_SCHEME: "http"

services:
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    networks:
      - arxiv-submission-ui
    ports:
      - "8025:8025"
    logging:
      driver: none

  submission-ui-redis:
    image: redis
    container_name: submission-ui-redis
    networks:
      - arxiv-submission-ui
    ports:
      - "6380:6379"
    logging:
      driver: none

  submission-ui-maria:
    image: mariadb:10.3
    container_name: submission-ui-maria
    networks:
      - arxiv-submission-ui
    ports:
      - "3307:3306"
    environment:
      MYSQL_USER: foouser
      MYSQL_PASSWORD: foopass
      MYSQL_ROOT_PASSWORD: foorootpassword
      MYSQL_DATABASE: submission
    command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
    logging:
      driver: none

  submission-agent-maria:
    image: mariadb:10.3
    container_name: submission-agent-maria
    networks:
      - arxiv-submission-ui
    ports:
      - "3308:3306"
    environment:
      MYSQL_USER: foouser
      MYSQL_PASSWORD: foopass
      MYSQL_ROOT_PASSWORD: foorootpassword
      MYSQL_DATABASE: agent
    command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
    # logging:
    #   driver: none

  filemanager-maria:
    image: mariadb:10.3
    container_name: filemanager-maria
    networks:
      - arxiv-submission-ui
    environment:
      MYSQL_USER: foouser
      MYSQL_PASSWORD: foopass
      MYSQL_ROOT_PASSWORD: foorootpassword
      MYSQL_DATABASE: uploads
    command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
    logging:
      driver: none

  filemanager:
    << : *base-service
    image: arxiv/filemanager:df4d57e1
    # You can uncomment these lines to build this from a local
    # repo. You may need to update `context`.
    # build:
    #   context: ../arxiv-filemanager
    #   dockerfile: Dockerfile
    container_name: arxiv-filemanager
    # volumes:
    #   - ./../arxiv-filemanager/filemanager/:/opt/arxiv/filemanager/
    networks:
      - arxiv-submission-ui
    ports:
      - "8001:8000"
    volumes:
      - fm-base:/storage
      - fm-quarantine:/quarantine
    depends_on:
      - mock-vault

  submission-localstack:
    image: atlassianlabs/localstack
    container_name: submission-localstack
    networks:
      - arxiv-submission-ui
    ports:
      - "4572:4572"
      - "4568:4568"
    environment:
      USE_SSL: 'true'
      DEBUG: 'true'
    logging:
      driver: none

  compiler-api:
    << : *base-service
    image: arxiv/compiler:78a1f0dea
    # You can uncomment these lines to build this from a local
    # repo. You may need to update `context`.
    # build:
    #    context: ../arxiv-compiler
    #    dockerfile: Dockerfile
    container_name: arxiv-compiler-api
    # command: pipenv run flask run -h 0.0.0.0 -p 8100
    # volumes:
    #   - ./../arxiv-compiler/compiler/:/opt/arxiv/compiler/
    ports:
      - 8100:8000
    depends_on:
      - submission-localstack
      - compiler-worker
      - mock-vault
    networks:
      - arxiv-submission-ui

  compiler-worker:
    << : *base-service
    image: arxiv/compiler:78a1f0dea
    # You can uncomment these lines to build this from a local
    # repo. You may need to update `context`.
    # build:
    #    context: ../arxiv-compiler
    #    dockerfile: Dockerfile
    container_name: arxiv-compiler-worker
    command: /opt/arxiv/start_worker.sh -A compiler.worker.celery_app --loglevel=INFO -E --concurrency=2
    # volumes:
    #   - ./../arxiv-compiler/compiler/:/opt/arxiv/compiler/
    volumes:
      - "${DIND_SOURCE_ROOT}:/tmp"
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - submission-localstack
      - mock-vault
    networks:
      - arxiv-submission-ui

  submission-worker:
    << : *base-service
    image: arxiv/submission-worker:e95bad0
    container_name: arxiv-submission-worker
    volumes:
      - "${DIND_SOURCE_ROOT}:/tmp"
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - submission-ui-redis
      - mock-vault
    networks:
      - arxiv-submission-ui

  submission-agent:
    << : *base-service
    image: arxiv/submission-agent:e95bad0
    container_name: arxiv-submission-agent
    volumes:
      - "${DIND_SOURCE_ROOT}:/tmp"
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - submission-ui-redis
      - submission-agent-maria
      - submission-localstack
      - mock-vault
    networks:
      - arxiv-submission-ui

  # This just runs once at the beginning to set up the database, then exits 0.
  submission-bootstrap:
    << : *base-service
    image: arxiv/submission-ui
    build:
      context: .
      dockerfile: Dockerfile
    container_name: submission-bootstrap
    command: python bootstrap.py
    depends_on:
      - submission-localstack
      - mock-vault
    networks:
      - arxiv-submission-ui

  filemanager-bootstrap:
    << : *base-service
    image: arxiv/filemanager:df4d57e1
    container_name: filemanager-bootstrap
    command: python bootstrap.py
    depends_on:
      - submission-localstack
      - mock-vault
    networks:
      - arxiv-submission-ui

  submission-ui:
    << : *base-service
    image: arxiv/submission-ui
    build:
      context: .
      dockerfile: Dockerfile
    container_name: arxiv-submission-ui
    command: uwsgi --http-socket :8000 -M -t 3000 --buffer-size 65535 --manage-script-name --wsgi-disable-file-wrapper --processes 8 --threads 1 --async 100 --ugreen  --mount /=wsgi.py --logformat "%(addr) %(addr) - %(user_id)|%(session_id) [%(rtime)] [%(uagent)] \"%(method) %(uri) %(proto)\" %(status) %(size) %(micros) %(ttfb)"
    # command: flask run -p 8000 -h 0.0.0.0
    # volumes:
    #   - ./submit/:/opt/arxiv/submit/
    ports:
      - 8000:8000
    depends_on:
      - submission-localstack
      - submission-bootstrap
      - compiler-api
      - filemanager
      - mock-vault
    networks:
      - arxiv-submission-ui

  mock-classifier:
    image: arxiv/mock-classifier
    build:
      context: .
      dockerfile: Dockerfile-mock-classifier
    container_name: mock-classifier
    networks:
      - arxiv-submission-ui

  plaintext-worker:
    image: arxiv/plaintext-worker:703e8644cf82c09fe99960b6775b0c677f7d1bc5
    environment:
      REDIS_ENDPOINT: "submission-ui-redis:6379"
      AWS_ACCESS_KEY_ID: "foo"
      AWS_SECRET_ACCESS_KEY: "bar"
      # KINESIS_VERIFY: ""
      # KINESIS_ENDPOINT: "plaintext-test-redis:4568"
      LOGLEVEL: 20
      COMPILER_ENDPOINT: "http://compiler-api:8000/"
      COMPILER_VERIFY: 0
      DOCKER_HOST: "unix:///var/run/docker.sock"

      VAULT_ENABLED: "0"
      NAMESPACE: "production"
      KUBE_TOKEN: "fookubetoken"
      VAULT_HOST: "mock-vault"
      VAULT_PORT: "8200"
      VAULT_ROLE: "plaintext"
      VAULT_CREDENTIAL: "foocredential"
      VAULT_SCHEME: "http"

      WAIT_FOR_SERVICES: 1
      WAIT_ON_STARTUP: 5

    volumes:
      # - docker:/var/lib/docker
      # - docker-run:/var/run
      - pdfs:/pdfs
      - data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - submission-ui-redis
      - mock-vault

    networks:
      - arxiv-submission-ui

  plaintext-api:
    image: arxiv/plaintext-api:703e8644cf82c09fe99960b6775b0c677f7d1bc5
    container_name: plaintext-api
    environment:
      REDIS_ENDPOINT: "submission-ui-redis:6379"
      AWS_ACCESS_KEY_ID: "foo"
      AWS_SECRET_ACCESS_KEY: "bar"
      # KINESIS_VERIFY: ""
      # KINESIS_ENDPOINT: "plaintext-test-redis:4568"
      LOGLEVEL: 20
      JWT_SECRET: foosecret
      COMPILER_ENDPOINT: "http://compiler-api:8000/"
      COMPILER_VERIFY: 0
      VAULT_ENABLED: "0"
      NAMESPACE: "production"
      KUBE_TOKEN: "fookubetoken"
      VAULT_HOST: "mock-vault"
      VAULT_PORT: "8200"
      VAULT_ROLE: "plaintext"
      VAULT_CREDENTIAL: "foocredential"
      VAULT_SCHEME: "http"

      WAIT_FOR_SERVICES: 1
      WAIT_ON_STARTUP: 5
    volumes:
      - data:/data
    depends_on:
      - submission-ui-redis
      - mock-vault
    networks:
      - arxiv-submission-ui

  mock-vault:
    image: arxiv/mock-vault
    build:
      context: .
      dockerfile: Dockerfile-mock-vault
    container_name: mock-vault
    environment:
      JWT_SECRET: foosecret
    networks:
      - arxiv-submission-ui


networks:
  arxiv-submission-ui:

volumes:
  pdfs:
  data:
  docker:
  docker-run:
  upload-data:
  fm-base:
  fm-quarantine:
